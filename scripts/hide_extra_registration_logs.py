# -*- coding: utf-8 -*-
"""Script to hide extra logs that were created by the bug fixed in
https://github.com/CenterForOpenScience/osf.io/commit/c056262e96be7391eeac7470bfae5426f20bdd88

Finds PROJECT_REGISTERED and REGISTRATION_APPROVAL_APPROVED_LOGS that were added
due to the bug and sets their should_hide field to True.
"""
import sys
import os
import json
import logging
from website.app import init_app
from scripts import utils as script_utils

from website import models as mdl
import datetime as dt

logger = logging.getLogger(__name__)

HERE = os.path.dirname(os.path.abspath(__file__))

# JSON file containing GUIDs of affected registrations
# Taken from script logs for approve_registrations.py on 2015-10-22
AFFECTED_REGISTRATION_GUIDS_FILE = os.path.join(HERE, 'hide_extra_registration_logs.json')

# Date when bug was introduced
# Scripts run at 12am EST == 4:00 UTC
REGRESSION_DATE = dt.datetime(2015, 10, 8, 4, 0, 0)

# Date fix was put in:
# https://github.com/CenterForOpenScience/osf.io/commit/c056262e96be7391eeac7470bfae5426f20bdd88
HOTFIX_DATE = dt.datetime(2015, 10, 22, 4, 30, 0)

def is_errant_log(log):
    """The approve_registration script saves 2 log types:
    - PROJECT_REGISTERED
    - REGISTRATION_APPROVAL_APPROVED
    """
    return (
        # Log already migrated
        log.should_hide is not True and
        (
            log.action in mdl.NodeLog.PROJECT_REGISTERED
            # The user is None because the
            # approve_registration script calls
            # _on_complete with user=None
            and log.user is None
            # Script is run at 12AM EST or 4:00 UTC
            # Yes, this is ugly, but there is no other way to distinguish
            # a log generated by the approve_registration script or a
            # log generated by a manual approval. Unlike PROJECT_REGISTERED logs,
            # these will have a user associated with them
            and log.date.hour == 4
            and log.date.minute == 0
        ) or
        (
            log.action in mdl.NodeLog.REGISTRATION_APPROVAL_APPROVED
            and log.date.hour == 4
            and log.date.minute == 0
        )
    )

def get_errant_logs(node):
    return [
        each for each in node.logs
        # Log was created while bug was live
        if REGRESSION_DATE <= each.date < HOTFIX_DATE
        and is_errant_log(each)
    ]

def get_errant_logs_for_tree(root_node):
    """Get logs that should be hidden for a node and its primary descendants.
    We iterate over descendants in the same way that RegistrationApproval._on_complete
    does.
    """
    return (
        log
        for node in root_node.node_and_primary_descendants()
        for log in get_errant_logs(node)
    )

def do_migration(dry=True):
    with open(AFFECTED_REGISTRATION_GUIDS_FILE) as fp:
        affected = json.load(fp)
    for guid in affected:
        registration = mdl.Node.load(guid)
        node = registration.registered_from
        errant_logs = list(get_errant_logs_for_tree(node))
        logger.info('Hiding {} logs for node {} and its children'.format(len(errant_logs), node._id))
        for log in errant_logs:
            log.should_hide = True
            if not dry:
                log.save()

def main(dry=True):
    init_app(set_backends=True, routes=False)  # Sets the storage backends on all models
    do_migration(dry=dry)


if __name__ == '__main__':
    dry = 'dry' in sys.argv
    if not dry:
        script_utils.add_file_logger(logger, __file__)
    main(dry=dry)
